function [r, v, j_theta, j_theta_handEnd, j_theta_handEnd_inv] = ...
    deriveKinematicsJacobian_planar_twoDOF_Fris(th1, th2, thfOrient, ...
    l1, l2, rfris, m1, m2, mfris)
%the following function derives the kinematics for two-link mechanism with 
%a frisbee constrained to the mechanism end-point at a given orientaiton,
%thOrient


% syms th1 th2 th1dot th2dot l1 l2 real
% in the above, th are absolute/inertial angles

r1 = l1/2;
r2 = l2/2;

%inertial unit vectors in plane
i = [1 0 ]';
j = [0 1 ]';

%unit vectors of frisbee body frame wrt 2nd link frame
e_rf = [cos(thfOrient) sin(thfOrient)]';
e_nf = [-sin(thfOrient) cos(thfOrient)]';

%position vectors
rc1 = r1*cos(th1)*i + r1*sin(th1)*j;

re = 2*rc1; %position elbow joint

rc2 = re + r2*cos(th2)*i + r2*sin(th2)*j; %2nd link COM

handEnd  = re + l2*cos(th2)*i + l2*sin(th2)*j;

frisCOM_wrtHandEnd = rfris*e_rf;

frisCOM_inertial = handEnd + frisCOM_wrtHandEnd;

mtot_pastElbow = m2+mfris;

rc2_withFris = (1 / mtot_pastElbow ) * (m2*rc2 + mfris*frisCOM_inertial);

vc1 =  jacobian(rc1,th1)*th1dot ;

vc2 =  jacobian(rc2,th1)*th1dot + jacobian(rc2,th2)*th2dot ;

handEndVel = jacobian(handEnd,th1)*th1dot + jacobian(handEnd,th2)*th2dot ;

r = [rc1; rc2];
v = [vc1; th1dot; vc2; th2dot];

omega = [th1dot; th2dot];

%jacobian wrt omega generalized coordinates, v = J(theta)omega
j_theta = jacobian(v,omega);

%J^-1*v = omega

%handEndVel = J(theta_hand)*omega
j_theta_handEnd = jacobian(handEndVel,omega);

j_theta_handEnd_inv = simplify( pinv(j_theta_handEnd) );



end

